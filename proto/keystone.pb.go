// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: keystone.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityState int32

const (
	EntityState_Invalid  EntityState = 0
	EntityState_Active   EntityState = 1
	EntityState_Offline  EntityState = 2
	EntityState_Corrupt  EntityState = 3
	EntityState_Archived EntityState = 4
	EntityState_Removed  EntityState = 5
)

// Enum value maps for EntityState.
var (
	EntityState_name = map[int32]string{
		0: "Invalid",
		1: "Active",
		2: "Offline",
		3: "Corrupt",
		4: "Archived",
		5: "Removed",
	}
	EntityState_value = map[string]int32{
		"Invalid":  0,
		"Active":   1,
		"Offline":  2,
		"Corrupt":  3,
		"Archived": 4,
		"Removed":  5,
	}
)

func (x EntityState) Enum() *EntityState {
	p := new(EntityState)
	*p = x
	return p
}

func (x EntityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityState) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[0].Descriptor()
}

func (EntityState) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[0]
}

func (x EntityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityState.Descriptor instead.
func (EntityState) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{0}
}

type LogLevel int32

const (
	LogLevel_Debug    LogLevel = 0
	LogLevel_Info     LogLevel = 1
	LogLevel_Notice   LogLevel = 2
	LogLevel_Warn     LogLevel = 3
	LogLevel_Error    LogLevel = 4
	LogLevel_Critical LogLevel = 5
	LogLevel_Alert    LogLevel = 6
	LogLevel_Fatal    LogLevel = 7
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "Debug",
		1: "Info",
		2: "Notice",
		3: "Warn",
		4: "Error",
		5: "Critical",
		6: "Alert",
		7: "Fatal",
	}
	LogLevel_value = map[string]int32{
		"Debug":    0,
		"Info":     1,
		"Notice":   2,
		"Warn":     3,
		"Error":    4,
		"Critical": 5,
		"Alert":    6,
		"Fatal":    7,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[1].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[1]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{1}
}

type Operator int32

const (
	Operator_Equal              Operator = 0
	Operator_NotEqual           Operator = 1
	Operator_GreaterThan        Operator = 2
	Operator_GreaterThanOrEqual Operator = 3
	Operator_LessThan           Operator = 4
	Operator_LessThanOrEqual    Operator = 5
	Operator_Contains           Operator = 6
	Operator_NotContains        Operator = 7
	Operator_StartsWith         Operator = 8
	Operator_EndsWith           Operator = 9
	Operator_In                 Operator = 10
	Operator_NotIn              Operator = 11
	Operator_Between            Operator = 12
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0:  "Equal",
		1:  "NotEqual",
		2:  "GreaterThan",
		3:  "GreaterThanOrEqual",
		4:  "LessThan",
		5:  "LessThanOrEqual",
		6:  "Contains",
		7:  "NotContains",
		8:  "StartsWith",
		9:  "EndsWith",
		10: "In",
		11: "NotIn",
		12: "Between",
	}
	Operator_value = map[string]int32{
		"Equal":              0,
		"NotEqual":           1,
		"GreaterThan":        2,
		"GreaterThanOrEqual": 3,
		"LessThan":           4,
		"LessThanOrEqual":    5,
		"Contains":           6,
		"NotContains":        7,
		"StartsWith":         8,
		"EndsWith":           9,
		"In":                 10,
		"NotIn":              11,
		"Between":            12,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[2].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[2]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{2}
}

type Schema_Option int32

const (
	Schema_None            Schema_Option = 0
	Schema_StoreMutations  Schema_Option = 1
	Schema_DisableIndexing Schema_Option = 2
	Schema_Immutable       Schema_Option = 3
)

// Enum value maps for Schema_Option.
var (
	Schema_Option_name = map[int32]string{
		0: "None",
		1: "StoreMutations",
		2: "DisableIndexing",
		3: "Immutable",
	}
	Schema_Option_value = map[string]int32{
		"None":            0,
		"StoreMutations":  1,
		"DisableIndexing": 2,
		"Immutable":       3,
	}
)

func (x Schema_Option) Enum() *Schema_Option {
	p := new(Schema_Option)
	*p = x
	return p
}

func (x Schema_Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Option) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[3].Descriptor()
}

func (Schema_Option) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[3]
}

func (x Schema_Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Option.Descriptor instead.
func (Schema_Option) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{3, 0}
}

type Property_Type int32

const (
	Property_Text       Property_Type = 0
	Property_Number     Property_Type = 1
	Property_Boolean    Property_Type = 2
	Property_Float      Property_Type = 3
	Property_Time       Property_Type = 4
	Property_Amount     Property_Type = 5
	Property_Map        Property_Type = 6
	Property_Set        Property_Type = 7
	Property_SecureText Property_Type = 8
	Property_VerifyText Property_Type = 9 // Data can be matched, but not read e.g. Password
)

// Enum value maps for Property_Type.
var (
	Property_Type_name = map[int32]string{
		0: "Text",
		1: "Number",
		2: "Boolean",
		3: "Float",
		4: "Time",
		5: "Amount",
		6: "Map",
		7: "Set",
		8: "SecureText",
		9: "VerifyText",
	}
	Property_Type_value = map[string]int32{
		"Text":       0,
		"Number":     1,
		"Boolean":    2,
		"Float":      3,
		"Time":       4,
		"Amount":     5,
		"Map":        6,
		"Set":        7,
		"SecureText": 8,
		"VerifyText": 9,
	}
)

func (x Property_Type) Enum() *Property_Type {
	p := new(Property_Type)
	*p = x
	return p
}

func (x Property_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Property_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[4].Descriptor()
}

func (Property_Type) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[4]
}

func (x Property_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Property_Type.Descriptor instead.
func (Property_Type) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{4, 0}
}

type Property_ExtendedType int32

const (
	Property_ExtendedNone Property_ExtendedType = 0
	Property_UserInput    Property_ExtendedType = 1
	Property_Secure       Property_ExtendedType = 2
	Property_Personal     Property_ExtendedType = 3 // Misc Personal Data (Not covered by specific types)
	Property_PersonName   Property_ExtendedType = 10
	Property_Email        Property_ExtendedType = 11
	Property_Phone        Property_ExtendedType = 12
	Property_IP           Property_ExtendedType = 14
	Property_Country      Property_ExtendedType = 15
	Property_URL          Property_ExtendedType = 16
)

// Enum value maps for Property_ExtendedType.
var (
	Property_ExtendedType_name = map[int32]string{
		0:  "ExtendedNone",
		1:  "UserInput",
		2:  "Secure",
		3:  "Personal",
		10: "PersonName",
		11: "Email",
		12: "Phone",
		14: "IP",
		15: "Country",
		16: "URL",
	}
	Property_ExtendedType_value = map[string]int32{
		"ExtendedNone": 0,
		"UserInput":    1,
		"Secure":       2,
		"Personal":     3,
		"PersonName":   10,
		"Email":        11,
		"Phone":        12,
		"IP":           14,
		"Country":      15,
		"URL":          16,
	}
)

func (x Property_ExtendedType) Enum() *Property_ExtendedType {
	p := new(Property_ExtendedType)
	*p = x
	return p
}

func (x Property_ExtendedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Property_ExtendedType) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[5].Descriptor()
}

func (Property_ExtendedType) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[5]
}

func (x Property_ExtendedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Property_ExtendedType.Descriptor instead.
func (Property_ExtendedType) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{4, 1}
}

type Property_Option int32

const (
	Property_None          Property_Option = 0
	Property_Unique        Property_Option = 1 // Unique across all entities of this type
	Property_Indexed       Property_Option = 2 // Query e.g. SQL
	Property_Immutable     Property_Option = 3 // Write once
	Property_Required      Property_Option = 4 // Must be set on creation
	Property_ReverseLookup Property_Option = 5 // Store a direct lookup to the entity
)

// Enum value maps for Property_Option.
var (
	Property_Option_name = map[int32]string{
		0: "None",
		1: "Unique",
		2: "Indexed",
		3: "Immutable",
		4: "Required",
		5: "ReverseLookup",
	}
	Property_Option_value = map[string]int32{
		"None":          0,
		"Unique":        1,
		"Indexed":       2,
		"Immutable":     3,
		"Required":      4,
		"ReverseLookup": 5,
	}
)

func (x Property_Option) Enum() *Property_Option {
	p := new(Property_Option)
	*p = x
	return p
}

func (x Property_Option) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Property_Option) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[6].Descriptor()
}

func (Property_Option) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[6]
}

func (x Property_Option) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Property_Option.Descriptor instead.
func (Property_Option) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{4, 2}
}

type EntityProperty_ModifyType int32

const (
	EntityProperty_Replace EntityProperty_ModifyType = 0
	EntityProperty_Append  EntityProperty_ModifyType = 1
	EntityProperty_Reduce  EntityProperty_ModifyType = 2
)

// Enum value maps for EntityProperty_ModifyType.
var (
	EntityProperty_ModifyType_name = map[int32]string{
		0: "Replace",
		1: "Append",
		2: "Reduce",
	}
	EntityProperty_ModifyType_value = map[string]int32{
		"Replace": 0,
		"Append":  1,
		"Reduce":  2,
	}
)

func (x EntityProperty_ModifyType) Enum() *EntityProperty_ModifyType {
	p := new(EntityProperty_ModifyType)
	*p = x
	return p
}

func (x EntityProperty_ModifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityProperty_ModifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[7].Descriptor()
}

func (EntityProperty_ModifyType) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[7]
}

func (x EntityProperty_ModifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityProperty_ModifyType.Descriptor instead.
func (EntityProperty_ModifyType) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{8, 0}
}

type StoredView_Type int32

const (
	StoredView_NotSet     StoredView_Type = 0
	StoredView_FilterList StoredView_Type = 1 // Basic SQL style filter
	StoredView_Search     StoredView_Type = 2 // Open Search backed / Full Text
)

// Enum value maps for StoredView_Type.
var (
	StoredView_Type_name = map[int32]string{
		0: "NotSet",
		1: "FilterList",
		2: "Search",
	}
	StoredView_Type_value = map[string]int32{
		"NotSet":     0,
		"FilterList": 1,
		"Search":     2,
	}
)

func (x StoredView_Type) Enum() *StoredView_Type {
	p := new(StoredView_Type)
	*p = x
	return p
}

func (x StoredView_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoredView_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_keystone_proto_enumTypes[8].Descriptor()
}

func (StoredView_Type) Type() protoreflect.EnumType {
	return &file_keystone_proto_enumTypes[8]
}

func (x StoredView_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoredView_Type.Descriptor instead.
func (StoredView_Type) EnumDescriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{38, 0}
}

type VendorApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorId string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *VendorApp) Reset() {
	*x = VendorApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorApp) ProtoMessage() {}

func (x *VendorApp) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorApp.ProtoReflect.Descriptor instead.
func (*VendorApp) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{0}
}

func (x *VendorApp) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *VendorApp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      *VendorApp `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Token       string     `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	WorkspaceId string     `protobuf:"bytes,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{1}
}

func (x *Authorization) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Authorization) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Authorization) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

type GenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode    int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{2}
}

func (x *GenericResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GenericResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GenericResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source      *VendorApp             `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsChild     bool                   `protobuf:"varint,4,opt,name=is_child,json=isChild,proto3" json:"is_child,omitempty"` // Child entity, saving of these must be given a parent
	Type        string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                       // Language Type
	Created     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	Description string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Properties  []*Property            `protobuf:"bytes,8,rep,name=properties,proto3" json:"properties,omitempty"`
	Options     []Schema_Option        `protobuf:"varint,9,rep,packed,name=options,proto3,enum=kubex.keystone.Schema_Option" json:"options,omitempty"`
	Singular    string                 `protobuf:"bytes,10,opt,name=singular,proto3" json:"singular,omitempty"`
	Plural      string                 `protobuf:"bytes,11,opt,name=plural,proto3" json:"plural,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{3}
}

func (x *Schema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Schema) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetIsChild() bool {
	if x != nil {
		return x.IsChild
	}
	return false
}

func (x *Schema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Schema) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Schema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schema) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Schema) GetOptions() []Schema_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Schema) GetSingular() string {
	if x != nil {
		return x.Singular
	}
	return ""
}

func (x *Schema) GetPlural() string {
	if x != nil {
		return x.Plural
	}
	return ""
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType     Property_Type         `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=kubex.keystone.Property_Type" json:"data_type,omitempty"`
	ExtendedType Property_ExtendedType `protobuf:"varint,3,opt,name=extended_type,json=extendedType,proto3,enum=kubex.keystone.Property_ExtendedType" json:"extended_type,omitempty"`
	Options      []Property_Option     `protobuf:"varint,5,rep,packed,name=options,proto3,enum=kubex.keystone.Property_Option" json:"options,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{4}
}

func (x *Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Property) GetDataType() Property_Type {
	if x != nil {
		return x.DataType
	}
	return Property_Text
}

func (x *Property) GetExtendedType() Property_ExtendedType {
	if x != nil {
		return x.ExtendedType
	}
	return Property_ExtendedNone
}

func (x *Property) GetOptions() []Property_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *VendorApp `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Key    string     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{5}
}

func (x *Key) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Int        int64                  `protobuf:"varint,3,opt,name=int,proto3" json:"int,omitempty"`
	Bool       bool                   `protobuf:"varint,4,opt,name=bool,proto3" json:"bool,omitempty"`
	Float      float64                `protobuf:"fixed64,5,opt,name=float,proto3" json:"float,omitempty"`
	Time       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	SecureText string                 `protobuf:"bytes,7,opt,name=secure_text,json=secureText,proto3" json:"secure_text,omitempty"`
	Map        map[string]string      `protobuf:"bytes,8,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Set        []string               `protobuf:"bytes,9,rep,name=set,proto3" json:"set,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{6}
}

func (x *Value) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Value) GetInt() int64 {
	if x != nil {
		return x.Int
	}
	return 0
}

func (x *Value) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *Value) GetFloat() float64 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *Value) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Value) GetSecureText() string {
	if x != nil {
		return x.SecureText
	}
	return ""
}

func (x *Value) GetMap() map[string]string {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *Value) GetSet() []string {
	if x != nil {
		return x.Set
	}
	return nil
}

// Entity is a single entity definition
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId    string                 `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	SchemaId    string                 `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	StateChange *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=state_change,json=stateChange,proto3" json:"state_change,omitempty"`
	State       EntityState            `protobuf:"varint,6,opt,name=state,proto3,enum=kubex.keystone.EntityState" json:"state,omitempty"`
	// last update is specific to the dataset you are looking at, not the entire entity
	LastUpdate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{7}
}

func (x *Entity) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Entity) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *Entity) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Entity) GetStateChange() *timestamppb.Timestamp {
	if x != nil {
		return x.StateChange
	}
	return nil
}

func (x *Entity) GetState() EntityState {
	if x != nil {
		return x.State
	}
	return EntityState_Invalid
}

func (x *Entity) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

// EntityProperty contains each property for an entity
type EntityProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property   string                    `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Value      *Value                    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ModifyType EntityProperty_ModifyType `protobuf:"varint,3,opt,name=modify_type,json=modifyType,proto3,enum=kubex.keystone.EntityProperty_ModifyType" json:"modify_type,omitempty"`
	Source     *VendorApp                `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *EntityProperty) Reset() {
	*x = EntityProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityProperty) ProtoMessage() {}

func (x *EntityProperty) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityProperty.ProtoReflect.Descriptor instead.
func (*EntityProperty) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{8}
}

func (x *EntityProperty) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *EntityProperty) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EntityProperty) GetModifyType() EntityProperty_ModifyType {
	if x != nil {
		return x.ModifyType
	}
	return EntityProperty_Replace
}

func (x *EntityProperty) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

// EntityChild is a child entity, allowing data storage e.g. an invoice can store its items as children rather than separate entities
type EntityChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Key   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Cid   string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Value int64  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EntityChild) Reset() {
	*x = EntityChild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityChild) ProtoMessage() {}

func (x *EntityChild) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityChild.ProtoReflect.Descriptor instead.
func (*EntityChild) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{9}
}

func (x *EntityChild) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EntityChild) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *EntityChild) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EntityChild) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// EntityDatum is a single data point for an entity, for storing a blob of data against the entity
type EntityDatum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *VendorApp `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Data   []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EntityDatum) Reset() {
	*x = EntityDatum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityDatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDatum) ProtoMessage() {}

func (x *EntityDatum) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDatum.ProtoReflect.Descriptor instead.
func (*EntityDatum) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{10}
}

func (x *EntityDatum) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *EntityDatum) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// EntityLog is a single log entry for an entity
type EntityLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor        string                 `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Tid          string                 `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"` // Time ID - read only
	Level        LogLevel               `protobuf:"varint,3,opt,name=level,proto3,enum=kubex.keystone.LogLevel" json:"level,omitempty"`
	Message      string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Reference    string                 `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	TraceId      string                 `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Time         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	Data         map[string]string      `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TtlRemaining int64                  `protobuf:"varint,9,opt,name=ttl_remaining,json=ttlRemaining,proto3" json:"ttl_remaining,omitempty"` // Read only
}

func (x *EntityLog) Reset() {
	*x = EntityLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLog) ProtoMessage() {}

func (x *EntityLog) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLog.ProtoReflect.Descriptor instead.
func (*EntityLog) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{11}
}

func (x *EntityLog) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *EntityLog) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *EntityLog) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_Debug
}

func (x *EntityLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EntityLog) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *EntityLog) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *EntityLog) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EntityLog) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EntityLog) GetTtlRemaining() int64 {
	if x != nil {
		return x.TtlRemaining
	}
	return 0
}

// EntityEvent is a single event for an entity, for storing a blob of data against the event for filtering
type EntityEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Key                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tid  string                 `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Data map[string]string      `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EntityEvent) Reset() {
	*x = EntityEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityEvent) ProtoMessage() {}

func (x *EntityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityEvent.ProtoReflect.Descriptor instead.
func (*EntityEvent) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{12}
}

func (x *EntityEvent) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EntityEvent) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *EntityEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EntityEvent) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// EntityRelationship is a relationship between two entities
type EntityRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationship *Key                   `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
	TargetId     string                 `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Since        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=since,proto3" json:"since,omitempty"`
	Data         map[string]string      `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EntityRelationship) Reset() {
	*x = EntityRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRelationship) ProtoMessage() {}

func (x *EntityRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRelationship.ProtoReflect.Descriptor instead.
func (*EntityRelationship) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{13}
}

func (x *EntityRelationship) GetRelationship() *Key {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *EntityRelationship) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *EntityRelationship) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *EntityRelationship) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type EntityLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EntityLabel) Reset() {
	*x = EntityLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityLabel) ProtoMessage() {}

func (x *EntityLabel) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityLabel.ProtoReflect.Descriptor instead.
func (*EntityLabel) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{14}
}

func (x *EntityLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityLabel) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EntitySensorMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensor string                 `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	At     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at,proto3" json:"at,omitempty"`
	Value  float32                `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Data   map[string]string      `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EntitySensorMeasurement) Reset() {
	*x = EntitySensorMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySensorMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySensorMeasurement) ProtoMessage() {}

func (x *EntitySensorMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySensorMeasurement.ProtoReflect.Descriptor instead.
func (*EntitySensorMeasurement) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{15}
}

func (x *EntitySensorMeasurement) GetSensor() string {
	if x != nil {
		return x.Sensor
	}
	return ""
}

func (x *EntitySensorMeasurement) GetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *EntitySensorMeasurement) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EntitySensorMeasurement) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type Mutator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAgent string     `protobuf:"bytes,1,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	RemoteIp  string     `protobuf:"bytes,2,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	UserId    string     `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Client    string     `protobuf:"bytes,4,opt,name=client,proto3" json:"client,omitempty"`
	Source    *VendorApp `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Parent    *Mutator   `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *Mutator) Reset() {
	*x = Mutator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mutator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutator) ProtoMessage() {}

func (x *Mutator) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutator.ProtoReflect.Descriptor instead.
func (*Mutator) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{16}
}

func (x *Mutator) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Mutator) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *Mutator) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Mutator) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *Mutator) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Mutator) GetParent() *Mutator {
	if x != nil {
		return x.Parent
	}
	return nil
}

type Mutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mutator                 *Mutator                   `protobuf:"bytes,1,opt,name=mutator,proto3" json:"mutator,omitempty"`
	Timestamp               *timestamppb.Timestamp     `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Comment                 string                     `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	State                   EntityState                `protobuf:"varint,4,opt,name=state,proto3,enum=kubex.keystone.EntityState" json:"state,omitempty"`
	Properties              []*EntityProperty          `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty"`
	DynamicProperties       []*EntityProperty          `protobuf:"bytes,7,rep,name=dynamic_properties,json=dynamicProperties,proto3" json:"dynamic_properties,omitempty"`
	RemoveDynamicProperties []string                   `protobuf:"bytes,8,rep,name=remove_dynamic_properties,json=removeDynamicProperties,proto3" json:"remove_dynamic_properties,omitempty"`
	Logs                    []*EntityLog               `protobuf:"bytes,9,rep,name=logs,proto3" json:"logs,omitempty"`
	Events                  []*EntityEvent             `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	Children                []*EntityChild             `protobuf:"bytes,11,rep,name=children,proto3" json:"children,omitempty"`
	RemoveChildren          []*EntityChild             `protobuf:"bytes,12,rep,name=remove_children,json=removeChildren,proto3" json:"remove_children,omitempty"`
	Relationships           []*EntityRelationship      `protobuf:"bytes,13,rep,name=relationships,proto3" json:"relationships,omitempty"`
	RemoveRelationships     []*EntityRelationship      `protobuf:"bytes,14,rep,name=remove_relationships,json=removeRelationships,proto3" json:"remove_relationships,omitempty"`
	Labels                  []*EntityLabel             `protobuf:"bytes,17,rep,name=labels,proto3" json:"labels,omitempty"`
	RemoveLabels            []*EntityLabel             `protobuf:"bytes,18,rep,name=remove_labels,json=removeLabels,proto3" json:"remove_labels,omitempty"`
	Measurements            []*EntitySensorMeasurement `protobuf:"bytes,19,rep,name=measurements,proto3" json:"measurements,omitempty"`
	Datum                   []byte                     `protobuf:"bytes,20,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (x *Mutation) Reset() {
	*x = Mutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutation) ProtoMessage() {}

func (x *Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutation.ProtoReflect.Descriptor instead.
func (*Mutation) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{17}
}

func (x *Mutation) GetMutator() *Mutator {
	if x != nil {
		return x.Mutator
	}
	return nil
}

func (x *Mutation) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Mutation) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Mutation) GetState() EntityState {
	if x != nil {
		return x.State
	}
	return EntityState_Invalid
}

func (x *Mutation) GetProperties() []*EntityProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Mutation) GetDynamicProperties() []*EntityProperty {
	if x != nil {
		return x.DynamicProperties
	}
	return nil
}

func (x *Mutation) GetRemoveDynamicProperties() []string {
	if x != nil {
		return x.RemoveDynamicProperties
	}
	return nil
}

func (x *Mutation) GetLogs() []*EntityLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Mutation) GetEvents() []*EntityEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Mutation) GetChildren() []*EntityChild {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Mutation) GetRemoveChildren() []*EntityChild {
	if x != nil {
		return x.RemoveChildren
	}
	return nil
}

func (x *Mutation) GetRelationships() []*EntityRelationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *Mutation) GetRemoveRelationships() []*EntityRelationship {
	if x != nil {
		return x.RemoveRelationships
	}
	return nil
}

func (x *Mutation) GetLabels() []*EntityLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Mutation) GetRemoveLabels() []*EntityLabel {
	if x != nil {
		return x.RemoveLabels
	}
	return nil
}

func (x *Mutation) GetMeasurements() []*EntitySensorMeasurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *Mutation) GetDatum() []byte {
	if x != nil {
		return x.Datum
	}
	return nil
}

type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Until *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
}

func (x *Window) Reset() {
	*x = Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{18}
}

func (x *Window) GetSince() *timestamppb.Timestamp {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *Window) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

type PropertyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property string   `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Operator Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=kubex.keystone.Operator" json:"operator,omitempty"`
	Values   []*Value `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"` // Combined for in/not_in, or multiple for other operators
}

func (x *PropertyFilter) Reset() {
	*x = PropertyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyFilter) ProtoMessage() {}

func (x *PropertyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyFilter.ProtoReflect.Descriptor instead.
func (*PropertyFilter) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{19}
}

func (x *PropertyFilter) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertyFilter) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_Equal
}

func (x *PropertyFilter) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type PropertySort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property   string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Descending bool   `protobuf:"varint,2,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *PropertySort) Reset() {
	*x = PropertySort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertySort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertySort) ProtoMessage() {}

func (x *PropertySort) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertySort.ProtoReflect.Descriptor instead.
func (*PropertySort) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{20}
}

func (x *PropertySort) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *PropertySort) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

type SchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Schema        `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	StoredViews   []*StoredView  `protobuf:"bytes,3,rep,name=stored_views,json=storedViews,proto3" json:"stored_views,omitempty"`
	Views         []*EntityView  `protobuf:"bytes,4,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *SchemaRequest) Reset() {
	*x = SchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRequest) ProtoMessage() {}

func (x *SchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRequest.ProtoReflect.Descriptor instead.
func (*SchemaRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{21}
}

func (x *SchemaRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *SchemaRequest) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SchemaRequest) GetStoredViews() []*StoredView {
	if x != nil {
		return x.StoredViews
	}
	return nil
}

func (x *SchemaRequest) GetViews() []*EntityView {
	if x != nil {
		return x.Views
	}
	return nil
}

type MutateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId      string         `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Schema        *Key           `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Mutation      *Mutation      `protobuf:"bytes,5,opt,name=mutation,proto3" json:"mutation,omitempty"`
}

func (x *MutateRequest) Reset() {
	*x = MutateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateRequest) ProtoMessage() {}

func (x *MutateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateRequest.ProtoReflect.Descriptor instead.
func (*MutateRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{22}
}

func (x *MutateRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *MutateRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *MutateRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *MutateRequest) GetMutation() *Mutation {
	if x != nil {
		return x.Mutation
	}
	return nil
}

type EntityView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Summary               bool               `protobuf:"varint,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Datum                 bool               `protobuf:"varint,5,opt,name=datum,proto3" json:"datum,omitempty"`
	Labels                bool               `protobuf:"varint,6,opt,name=labels,proto3" json:"labels,omitempty"`
	Properties            []*PropertyRequest `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty"`
	Children              []*ChildRequest    `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`
	RelationshipByType    []*Key             `protobuf:"bytes,11,rep,name=relationship_by_type,json=relationshipByType,proto3" json:"relationship_by_type,omitempty"`
	DescendantCountType   []*Key             `protobuf:"bytes,12,rep,name=descendant_count_type,json=descendantCountType,proto3" json:"descendant_count_type,omitempty"`
	RelationshipCount     bool               `protobuf:"varint,13,opt,name=relationship_count,json=relationshipCount,proto3" json:"relationship_count,omitempty"`
	RelationshipCountType []*Key             `protobuf:"bytes,14,rep,name=relationship_count_type,json=relationshipCountType,proto3" json:"relationship_count_type,omitempty"`
	ChildCount            bool               `protobuf:"varint,15,opt,name=child_count,json=childCount,proto3" json:"child_count,omitempty"`
	DynamicProperties     []string           `protobuf:"bytes,17,rep,name=dynamic_properties,json=dynamicProperties,proto3" json:"dynamic_properties,omitempty"`
}

func (x *EntityView) Reset() {
	*x = EntityView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityView) ProtoMessage() {}

func (x *EntityView) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityView.ProtoReflect.Descriptor instead.
func (*EntityView) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{23}
}

func (x *EntityView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityView) GetSummary() bool {
	if x != nil {
		return x.Summary
	}
	return false
}

func (x *EntityView) GetDatum() bool {
	if x != nil {
		return x.Datum
	}
	return false
}

func (x *EntityView) GetLabels() bool {
	if x != nil {
		return x.Labels
	}
	return false
}

func (x *EntityView) GetProperties() []*PropertyRequest {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *EntityView) GetChildren() []*ChildRequest {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *EntityView) GetRelationshipByType() []*Key {
	if x != nil {
		return x.RelationshipByType
	}
	return nil
}

func (x *EntityView) GetDescendantCountType() []*Key {
	if x != nil {
		return x.DescendantCountType
	}
	return nil
}

func (x *EntityView) GetRelationshipCount() bool {
	if x != nil {
		return x.RelationshipCount
	}
	return false
}

func (x *EntityView) GetRelationshipCountType() []*Key {
	if x != nil {
		return x.RelationshipCountType
	}
	return nil
}

func (x *EntityView) GetChildCount() bool {
	if x != nil {
		return x.ChildCount
	}
	return false
}

func (x *EntityView) GetDynamicProperties() []string {
	if x != nil {
		return x.DynamicProperties
	}
	return nil
}

type TypeCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Key  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TypeCount) Reset() {
	*x = TypeCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeCount) ProtoMessage() {}

func (x *TypeCount) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeCount.ProtoReflect.Descriptor instead.
func (*TypeCount) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{24}
}

func (x *TypeCount) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TypeCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type EntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId      string         `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	UniqueId      *IDLookup      `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	View          *EntityView    `protobuf:"bytes,4,opt,name=view,proto3" json:"view,omitempty"`
	Schema        *Key           `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *EntityRequest) Reset() {
	*x = EntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRequest) ProtoMessage() {}

func (x *EntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRequest.ProtoReflect.Descriptor instead.
func (*EntityRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{25}
}

func (x *EntityRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *EntityRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EntityRequest) GetUniqueId() *IDLookup {
	if x != nil {
		return x.UniqueId
	}
	return nil
}

func (x *EntityRequest) GetView() *EntityView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *EntityRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

type EntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity             *Entity               `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Properties         []*EntityProperty     `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	Children           []*EntityChild        `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	Datum              *EntityDatum          `protobuf:"bytes,5,opt,name=datum,proto3" json:"datum,omitempty"`
	Relationships      []*EntityRelationship `protobuf:"bytes,6,rep,name=relationships,proto3" json:"relationships,omitempty"`
	Labels             []*EntityLabel        `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	RelationshipCounts []*TypeCount          `protobuf:"bytes,8,rep,name=relationship_counts,json=relationshipCounts,proto3" json:"relationship_counts,omitempty"`
	DescendantCounts   []*TypeCount          `protobuf:"bytes,9,rep,name=descendant_counts,json=descendantCounts,proto3" json:"descendant_counts,omitempty"`
	ChildCounts        []*TypeCount          `protobuf:"bytes,10,rep,name=child_counts,json=childCounts,proto3" json:"child_counts,omitempty"`
	DynamicProperties  []*EntityProperty     `protobuf:"bytes,12,rep,name=dynamic_properties,json=dynamicProperties,proto3" json:"dynamic_properties,omitempty"`
}

func (x *EntityResponse) Reset() {
	*x = EntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityResponse) ProtoMessage() {}

func (x *EntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityResponse.ProtoReflect.Descriptor instead.
func (*EntityResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{26}
}

func (x *EntityResponse) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *EntityResponse) GetProperties() []*EntityProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *EntityResponse) GetChildren() []*EntityChild {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *EntityResponse) GetDatum() *EntityDatum {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *EntityResponse) GetRelationships() []*EntityRelationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *EntityResponse) GetLabels() []*EntityLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EntityResponse) GetRelationshipCounts() []*TypeCount {
	if x != nil {
		return x.RelationshipCounts
	}
	return nil
}

func (x *EntityResponse) GetDescendantCounts() []*TypeCount {
	if x != nil {
		return x.DescendantCounts
	}
	return nil
}

func (x *EntityResponse) GetChildCounts() []*TypeCount {
	if x != nil {
		return x.ChildCounts
	}
	return nil
}

func (x *EntityResponse) GetDynamicProperties() []*EntityProperty {
	if x != nil {
		return x.DynamicProperties
	}
	return nil
}

type MutateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Success       bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode     int32  `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	EntityId      string `protobuf:"bytes,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (x *MutateResponse) Reset() {
	*x = MutateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateResponse) ProtoMessage() {}

func (x *MutateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateResponse.ProtoReflect.Descriptor instead.
func (*MutateResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{27}
}

func (x *MutateResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *MutateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MutateResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MutateResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *MutateResponse) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

type IDLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId string `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Property string `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
	UniqueId string `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
}

func (x *IDLookup) Reset() {
	*x = IDLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDLookup) ProtoMessage() {}

func (x *IDLookup) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDLookup.ProtoReflect.Descriptor instead.
func (*IDLookup) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{28}
}

func (x *IDLookup) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *IDLookup) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *IDLookup) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

type PropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     *VendorApp `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Properties []string   `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	Decrypt    bool       `protobuf:"varint,3,opt,name=decrypt,proto3" json:"decrypt,omitempty"`
}

func (x *PropertyRequest) Reset() {
	*x = PropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyRequest) ProtoMessage() {}

func (x *PropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyRequest.ProtoReflect.Descriptor instead.
func (*PropertyRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{29}
}

func (x *PropertyRequest) GetSource() *VendorApp {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PropertyRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *PropertyRequest) GetDecrypt() bool {
	if x != nil {
		return x.Decrypt
	}
	return false
}

type ChildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Key     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Cid  []string `protobuf:"bytes,2,rep,name=cid,proto3" json:"cid,omitempty"`
}

func (x *ChildRequest) Reset() {
	*x = ChildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildRequest) ProtoMessage() {}

func (x *ChildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildRequest.ProtoReflect.Descriptor instead.
func (*ChildRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{30}
}

func (x *ChildRequest) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ChildRequest) GetCid() []string {
	if x != nil {
		return x.Cid
	}
	return nil
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId      string         `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Type          *Key           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Levels        []LogLevel     `protobuf:"varint,5,rep,packed,name=levels,proto3,enum=kubex.keystone.LogLevel" json:"levels,omitempty"`
	MinLevel      LogLevel       `protobuf:"varint,6,opt,name=min_level,json=minLevel,proto3,enum=kubex.keystone.LogLevel" json:"min_level,omitempty"`
	Window        *Window        `protobuf:"bytes,7,opt,name=window,proto3" json:"window,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{31}
}

func (x *LogRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *LogRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *LogRequest) GetType() *Key {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *LogRequest) GetLevels() []LogLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *LogRequest) GetMinLevel() LogLevel {
	if x != nil {
		return x.MinLevel
	}
	return LogLevel_Debug
}

func (x *LogRequest) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

type LogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*EntityLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *LogsResponse) Reset() {
	*x = LogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsResponse) ProtoMessage() {}

func (x *LogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsResponse.ProtoReflect.Descriptor instead.
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{32}
}

func (x *LogsResponse) GetLogs() []*EntityLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization  *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	EntityId       string         `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	EventByType    []*Key         `protobuf:"bytes,12,rep,name=event_by_type,json=eventByType,proto3" json:"event_by_type,omitempty"`
	EventsInWindow *Window        `protobuf:"bytes,13,opt,name=events_in_window,json=eventsInWindow,proto3" json:"events_in_window,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{33}
}

func (x *EventRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *EventRequest) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *EventRequest) GetEventByType() []*Key {
	if x != nil {
		return x.EventByType
	}
	return nil
}

func (x *EventRequest) GetEventsInWindow() *Window {
	if x != nil {
		return x.EventsInWindow
	}
	return nil
}

type EventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*EntityEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *EventsResponse) Reset() {
	*x = EventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse) ProtoMessage() {}

func (x *EventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse.ProtoReflect.Descriptor instead.
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{34}
}

func (x *EventsResponse) GetEvents() []*EntityEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RelationOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationship  *Key   `protobuf:"bytes,1,opt,name=relationship,proto3" json:"relationship,omitempty"`
	SourceId      string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *RelationOf) Reset() {
	*x = RelationOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationOf) ProtoMessage() {}

func (x *RelationOf) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationOf.ProtoReflect.Descriptor instead.
func (*RelationOf) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{35}
}

func (x *RelationOf) GetRelationship() *Key {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *RelationOf) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *RelationOf) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type FindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key           `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	View          *EntityView    `protobuf:"bytes,3,opt,name=view,proto3" json:"view,omitempty"`
	// Filtering
	EntityIds       []string          `protobuf:"bytes,4,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`
	RelationOf      *RelationOf       `protobuf:"bytes,5,opt,name=relation_of,json=relationOf,proto3" json:"relation_of,omitempty"`
	PropertyFilters []*PropertyFilter `protobuf:"bytes,6,rep,name=property_filters,json=propertyFilters,proto3" json:"property_filters,omitempty"`
	LabelFilters    []*EntityLabel    `protobuf:"bytes,7,rep,name=label_filters,json=labelFilters,proto3" json:"label_filters,omitempty"`
	ParentEntityId  string            `protobuf:"bytes,8,opt,name=parent_entity_id,json=parentEntityId,proto3" json:"parent_entity_id,omitempty"`
}

func (x *FindRequest) Reset() {
	*x = FindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRequest) ProtoMessage() {}

func (x *FindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRequest.ProtoReflect.Descriptor instead.
func (*FindRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{36}
}

func (x *FindRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *FindRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *FindRequest) GetView() *EntityView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *FindRequest) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

func (x *FindRequest) GetRelationOf() *RelationOf {
	if x != nil {
		return x.RelationOf
	}
	return nil
}

func (x *FindRequest) GetPropertyFilters() []*PropertyFilter {
	if x != nil {
		return x.PropertyFilters
	}
	return nil
}

func (x *FindRequest) GetLabelFilters() []*EntityLabel {
	if x != nil {
		return x.LabelFilters
	}
	return nil
}

func (x *FindRequest) GetParentEntityId() string {
	if x != nil {
		return x.ParentEntityId
	}
	return ""
}

type FindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*EntityResponse `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	// TODO: Add pagination
	TotalResults int32  `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	ResultId     string `protobuf:"bytes,3,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
}

func (x *FindResponse) Reset() {
	*x = FindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResponse) ProtoMessage() {}

func (x *FindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResponse.ProtoReflect.Descriptor instead.
func (*FindResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{37}
}

func (x *FindResponse) GetEntities() []*EntityResponse {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *FindResponse) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *FindResponse) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

type StoredView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization    `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key              `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Name          string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Properties    []string          `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
	Filters       []*PropertyFilter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	Type          StoredView_Type   `protobuf:"varint,6,opt,name=type,proto3,enum=kubex.keystone.StoredView_Type" json:"type,omitempty"`
	ParentName    string            `protobuf:"bytes,7,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty"` // Allow for a materialized view to be created from another view - 1 LEVEL DEEP ONLY
}

func (x *StoredView) Reset() {
	*x = StoredView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredView) ProtoMessage() {}

func (x *StoredView) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredView.ProtoReflect.Descriptor instead.
func (*StoredView) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{38}
}

func (x *StoredView) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *StoredView) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *StoredView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoredView) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *StoredView) GetFilters() []*PropertyFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *StoredView) GetType() StoredView_Type {
	if x != nil {
		return x.Type
	}
	return StoredView_NotSet
}

func (x *StoredView) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

type PageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber int32  `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"` // Offset page * per_page (Page should start at 1)
	PerPage    int32  `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`          // Items per page
	AfterId    string `protobuf:"bytes,3,opt,name=after_id,json=afterId,proto3" json:"after_id,omitempty"`           // Cursor for pagination - page number ignored
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{39}
}

func (x *PageRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PageRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *PageRequest) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization    `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key              `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Properties    []string          `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"` // Only properties within the ADS can be requested, specifying no properties will return all results
	FromView      string            `protobuf:"bytes,4,opt,name=from_view,json=fromView,proto3" json:"from_view,omitempty"`
	Filters       []*PropertyFilter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	Sort          []*PropertySort   `protobuf:"bytes,6,rep,name=sort,proto3" json:"sort,omitempty"`
	Page          *PageRequest      `protobuf:"bytes,7,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{40}
}

func (x *ListRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ListRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ListRequest) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ListRequest) GetFromView() string {
	if x != nil {
		return x.FromView
	}
	return ""
}

func (x *ListRequest) GetFilters() []*PropertyFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListRequest) GetSort() []*PropertySort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListRequest) GetPage() *PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities     []*EntityResponse `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	TotalResults int32             `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{41}
}

func (x *ListResponse) GetEntities() []*EntityResponse {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ListResponse) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

type EntitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*EntityResponse `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *EntitiesResponse) Reset() {
	*x = EntitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitiesResponse) ProtoMessage() {}

func (x *EntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitiesResponse.ProtoReflect.Descriptor instead.
func (*EntitiesResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{42}
}

func (x *EntitiesResponse) GetEntities() []*EntityResponse {
	if x != nil {
		return x.Entities
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{43}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type SchemaStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization    *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema           *Key           `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	CreatedFrom      *Date          `protobuf:"bytes,3,opt,name=created_from,json=createdFrom,proto3" json:"created_from,omitempty"` // Inclusive
	CreatedUntil     *Date          `protobuf:"bytes,4,opt,name=created_until,json=createdUntil,proto3" json:"created_until,omitempty"`
	IncludeBreakdown bool           `protobuf:"varint,5,opt,name=include_breakdown,json=includeBreakdown,proto3" json:"include_breakdown,omitempty"`
}

func (x *SchemaStatisticsRequest) Reset() {
	*x = SchemaStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaStatisticsRequest) ProtoMessage() {}

func (x *SchemaStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaStatisticsRequest.ProtoReflect.Descriptor instead.
func (*SchemaStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{44}
}

func (x *SchemaStatisticsRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *SchemaStatisticsRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SchemaStatisticsRequest) GetCreatedFrom() *Date {
	if x != nil {
		return x.CreatedFrom
	}
	return nil
}

func (x *SchemaStatisticsRequest) GetCreatedUntil() *Date {
	if x != nil {
		return x.CreatedUntil
	}
	return nil
}

func (x *SchemaStatisticsRequest) GetIncludeBreakdown() bool {
	if x != nil {
		return x.IncludeBreakdown
	}
	return false
}

type SchemaStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyCount   map[string]int64 `protobuf:"bytes,1,rep,name=daily_count,json=dailyCount,proto3" json:"daily_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // YYYY-MM-DD
	InRangeCount int64            `protobuf:"varint,2,opt,name=in_range_count,json=inRangeCount,proto3" json:"in_range_count,omitempty"`
}

func (x *SchemaStatisticsResponse) Reset() {
	*x = SchemaStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaStatisticsResponse) ProtoMessage() {}

func (x *SchemaStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaStatisticsResponse.ProtoReflect.Descriptor instead.
func (*SchemaStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{45}
}

func (x *SchemaStatisticsResponse) GetDailyCount() map[string]int64 {
	if x != nil {
		return x.DailyCount
	}
	return nil
}

func (x *SchemaStatisticsResponse) GetInRangeCount() int64 {
	if x != nil {
		return x.InRangeCount
	}
	return 0
}

type DailyEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorization *Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Schema        *Key           `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Date          *Date          `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	AfterId       string         `protobuf:"bytes,4,opt,name=after_id,json=afterId,proto3" json:"after_id,omitempty"`
	ReverseOrder  bool           `protobuf:"varint,5,opt,name=reverse_order,json=reverseOrder,proto3" json:"reverse_order,omitempty"`
	Limit         int32          `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DailyEntityRequest) Reset() {
	*x = DailyEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyEntityRequest) ProtoMessage() {}

func (x *DailyEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyEntityRequest.ProtoReflect.Descriptor instead.
func (*DailyEntityRequest) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{46}
}

func (x *DailyEntityRequest) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *DailyEntityRequest) GetSchema() *Key {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *DailyEntityRequest) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DailyEntityRequest) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *DailyEntityRequest) GetReverseOrder() bool {
	if x != nil {
		return x.ReverseOrder
	}
	return false
}

func (x *DailyEntityRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DailyEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities map[string]string `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Creation ID > Entity ID
	FirstId  string            `protobuf:"bytes,2,opt,name=first_id,json=firstId,proto3" json:"first_id,omitempty"`
	LastId   string            `protobuf:"bytes,3,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
}

func (x *DailyEntityResponse) Reset() {
	*x = DailyEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keystone_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyEntityResponse) ProtoMessage() {}

func (x *DailyEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keystone_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyEntityResponse.ProtoReflect.Descriptor instead.
func (*DailyEntityResponse) Descriptor() ([]byte, []int) {
	return file_keystone_proto_rawDescGZIP(), []int{47}
}

func (x *DailyEntityResponse) GetEntities() map[string]string {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *DailyEntityResponse) GetFirstId() string {
	if x != nil {
		return x.FirstId
	}
	return ""
}

func (x *DailyEntityResponse) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

var File_keystone_proto protoreflect.FileDescriptor

var file_keystone_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3f, 0x0a, 0x09, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x7b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x6f, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xd9, 0x03, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x72,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x22, 0x4a, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x22, 0xcc, 0x04, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x7c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x61, 0x70, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x10, 0x07, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x65, 0x78, 0x74, 0x10, 0x09, 0x22, 0x8d,
	0x01, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x0c,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x10, 0x22, 0x5b,
	0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x10, 0x05, 0x22, 0x4a, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xa4, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x6d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x65, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6,
	0x02, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x31, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x10, 0x02, 0x22, 0x72, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x0b, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xfd, 0x02, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f,
	0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x74, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x74, 0x6c, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xec, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97,
	0x02, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xf3, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x61,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x01, 0x0a, 0x07, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x22, 0xed, 0x07, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x40, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x22, 0x6c, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0d, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x6d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbf, 0x04, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47,
	0x0a, 0x15, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b,
	0x65, 0x79, 0x52, 0x13, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x15, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x85, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x44, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x8c, 0x05, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x08, 0x49,
	0x44, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x22, 0x7e, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x49, 0x0a,
	0x0c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x3d, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x45, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x89, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x12, 0x37,
	0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x0b,
	0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x52, 0x0a, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22,
	0xf2, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x43,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x10, 0x02, 0x22, 0x64, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd9, 0x02, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0xac, 0x02, 0x0a, 0x17,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xda, 0x01, 0x0a, 0x18, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xd5, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x5b, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x64, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x61, 0x74, 0x61, 0x6c, 0x10, 0x07, 0x2a, 0xcc, 0x01, 0x0a, 0x08,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65,
	0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x65, 0x73, 0x73,
	0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x10, 0x09, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x6e,
	0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x10, 0x0b, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x10, 0x0c, 0x32, 0xc2, 0x05, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x12, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x12, 0x1d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x04,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x78, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x16, 0x5a, 0x14, 0x2e, 0x2e, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x2d, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_keystone_proto_rawDescOnce sync.Once
	file_keystone_proto_rawDescData = file_keystone_proto_rawDesc
)

func file_keystone_proto_rawDescGZIP() []byte {
	file_keystone_proto_rawDescOnce.Do(func() {
		file_keystone_proto_rawDescData = protoimpl.X.CompressGZIP(file_keystone_proto_rawDescData)
	})
	return file_keystone_proto_rawDescData
}

var file_keystone_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_keystone_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_keystone_proto_goTypes = []interface{}{
	(EntityState)(0),                 // 0: kubex.keystone.EntityState
	(LogLevel)(0),                    // 1: kubex.keystone.LogLevel
	(Operator)(0),                    // 2: kubex.keystone.Operator
	(Schema_Option)(0),               // 3: kubex.keystone.Schema.Option
	(Property_Type)(0),               // 4: kubex.keystone.Property.Type
	(Property_ExtendedType)(0),       // 5: kubex.keystone.Property.ExtendedType
	(Property_Option)(0),             // 6: kubex.keystone.Property.Option
	(EntityProperty_ModifyType)(0),   // 7: kubex.keystone.EntityProperty.ModifyType
	(StoredView_Type)(0),             // 8: kubex.keystone.StoredView.Type
	(*VendorApp)(nil),                // 9: kubex.keystone.VendorApp
	(*Authorization)(nil),            // 10: kubex.keystone.Authorization
	(*GenericResponse)(nil),          // 11: kubex.keystone.GenericResponse
	(*Schema)(nil),                   // 12: kubex.keystone.Schema
	(*Property)(nil),                 // 13: kubex.keystone.Property
	(*Key)(nil),                      // 14: kubex.keystone.Key
	(*Value)(nil),                    // 15: kubex.keystone.Value
	(*Entity)(nil),                   // 16: kubex.keystone.Entity
	(*EntityProperty)(nil),           // 17: kubex.keystone.EntityProperty
	(*EntityChild)(nil),              // 18: kubex.keystone.EntityChild
	(*EntityDatum)(nil),              // 19: kubex.keystone.EntityDatum
	(*EntityLog)(nil),                // 20: kubex.keystone.EntityLog
	(*EntityEvent)(nil),              // 21: kubex.keystone.EntityEvent
	(*EntityRelationship)(nil),       // 22: kubex.keystone.EntityRelationship
	(*EntityLabel)(nil),              // 23: kubex.keystone.EntityLabel
	(*EntitySensorMeasurement)(nil),  // 24: kubex.keystone.EntitySensorMeasurement
	(*Mutator)(nil),                  // 25: kubex.keystone.Mutator
	(*Mutation)(nil),                 // 26: kubex.keystone.Mutation
	(*Window)(nil),                   // 27: kubex.keystone.Window
	(*PropertyFilter)(nil),           // 28: kubex.keystone.PropertyFilter
	(*PropertySort)(nil),             // 29: kubex.keystone.PropertySort
	(*SchemaRequest)(nil),            // 30: kubex.keystone.SchemaRequest
	(*MutateRequest)(nil),            // 31: kubex.keystone.MutateRequest
	(*EntityView)(nil),               // 32: kubex.keystone.EntityView
	(*TypeCount)(nil),                // 33: kubex.keystone.TypeCount
	(*EntityRequest)(nil),            // 34: kubex.keystone.EntityRequest
	(*EntityResponse)(nil),           // 35: kubex.keystone.EntityResponse
	(*MutateResponse)(nil),           // 36: kubex.keystone.MutateResponse
	(*IDLookup)(nil),                 // 37: kubex.keystone.IDLookup
	(*PropertyRequest)(nil),          // 38: kubex.keystone.PropertyRequest
	(*ChildRequest)(nil),             // 39: kubex.keystone.ChildRequest
	(*LogRequest)(nil),               // 40: kubex.keystone.LogRequest
	(*LogsResponse)(nil),             // 41: kubex.keystone.LogsResponse
	(*EventRequest)(nil),             // 42: kubex.keystone.EventRequest
	(*EventsResponse)(nil),           // 43: kubex.keystone.EventsResponse
	(*RelationOf)(nil),               // 44: kubex.keystone.RelationOf
	(*FindRequest)(nil),              // 45: kubex.keystone.FindRequest
	(*FindResponse)(nil),             // 46: kubex.keystone.FindResponse
	(*StoredView)(nil),               // 47: kubex.keystone.StoredView
	(*PageRequest)(nil),              // 48: kubex.keystone.PageRequest
	(*ListRequest)(nil),              // 49: kubex.keystone.ListRequest
	(*ListResponse)(nil),             // 50: kubex.keystone.ListResponse
	(*EntitiesResponse)(nil),         // 51: kubex.keystone.EntitiesResponse
	(*Date)(nil),                     // 52: kubex.keystone.Date
	(*SchemaStatisticsRequest)(nil),  // 53: kubex.keystone.SchemaStatisticsRequest
	(*SchemaStatisticsResponse)(nil), // 54: kubex.keystone.SchemaStatisticsResponse
	(*DailyEntityRequest)(nil),       // 55: kubex.keystone.DailyEntityRequest
	(*DailyEntityResponse)(nil),      // 56: kubex.keystone.DailyEntityResponse
	nil,                              // 57: kubex.keystone.Value.MapEntry
	nil,                              // 58: kubex.keystone.EntityLog.DataEntry
	nil,                              // 59: kubex.keystone.EntityEvent.DataEntry
	nil,                              // 60: kubex.keystone.EntityRelationship.DataEntry
	nil,                              // 61: kubex.keystone.EntitySensorMeasurement.DataEntry
	nil,                              // 62: kubex.keystone.SchemaStatisticsResponse.DailyCountEntry
	nil,                              // 63: kubex.keystone.DailyEntityResponse.EntitiesEntry
	(*timestamppb.Timestamp)(nil),    // 64: google.protobuf.Timestamp
}
var file_keystone_proto_depIdxs = []int32{
	9,   // 0: kubex.keystone.Authorization.source:type_name -> kubex.keystone.VendorApp
	9,   // 1: kubex.keystone.Schema.source:type_name -> kubex.keystone.VendorApp
	64,  // 2: kubex.keystone.Schema.created:type_name -> google.protobuf.Timestamp
	13,  // 3: kubex.keystone.Schema.properties:type_name -> kubex.keystone.Property
	3,   // 4: kubex.keystone.Schema.options:type_name -> kubex.keystone.Schema.Option
	4,   // 5: kubex.keystone.Property.data_type:type_name -> kubex.keystone.Property.Type
	5,   // 6: kubex.keystone.Property.extended_type:type_name -> kubex.keystone.Property.ExtendedType
	6,   // 7: kubex.keystone.Property.options:type_name -> kubex.keystone.Property.Option
	9,   // 8: kubex.keystone.Key.source:type_name -> kubex.keystone.VendorApp
	64,  // 9: kubex.keystone.Value.time:type_name -> google.protobuf.Timestamp
	57,  // 10: kubex.keystone.Value.map:type_name -> kubex.keystone.Value.MapEntry
	64,  // 11: kubex.keystone.Entity.created:type_name -> google.protobuf.Timestamp
	64,  // 12: kubex.keystone.Entity.state_change:type_name -> google.protobuf.Timestamp
	0,   // 13: kubex.keystone.Entity.state:type_name -> kubex.keystone.EntityState
	64,  // 14: kubex.keystone.Entity.lastUpdate:type_name -> google.protobuf.Timestamp
	15,  // 15: kubex.keystone.EntityProperty.value:type_name -> kubex.keystone.Value
	7,   // 16: kubex.keystone.EntityProperty.modify_type:type_name -> kubex.keystone.EntityProperty.ModifyType
	9,   // 17: kubex.keystone.EntityProperty.source:type_name -> kubex.keystone.VendorApp
	14,  // 18: kubex.keystone.EntityChild.type:type_name -> kubex.keystone.Key
	9,   // 19: kubex.keystone.EntityDatum.source:type_name -> kubex.keystone.VendorApp
	1,   // 20: kubex.keystone.EntityLog.level:type_name -> kubex.keystone.LogLevel
	64,  // 21: kubex.keystone.EntityLog.time:type_name -> google.protobuf.Timestamp
	58,  // 22: kubex.keystone.EntityLog.data:type_name -> kubex.keystone.EntityLog.DataEntry
	14,  // 23: kubex.keystone.EntityEvent.type:type_name -> kubex.keystone.Key
	64,  // 24: kubex.keystone.EntityEvent.time:type_name -> google.protobuf.Timestamp
	59,  // 25: kubex.keystone.EntityEvent.data:type_name -> kubex.keystone.EntityEvent.DataEntry
	14,  // 26: kubex.keystone.EntityRelationship.relationship:type_name -> kubex.keystone.Key
	64,  // 27: kubex.keystone.EntityRelationship.since:type_name -> google.protobuf.Timestamp
	60,  // 28: kubex.keystone.EntityRelationship.data:type_name -> kubex.keystone.EntityRelationship.DataEntry
	64,  // 29: kubex.keystone.EntitySensorMeasurement.at:type_name -> google.protobuf.Timestamp
	61,  // 30: kubex.keystone.EntitySensorMeasurement.data:type_name -> kubex.keystone.EntitySensorMeasurement.DataEntry
	9,   // 31: kubex.keystone.Mutator.source:type_name -> kubex.keystone.VendorApp
	25,  // 32: kubex.keystone.Mutator.parent:type_name -> kubex.keystone.Mutator
	25,  // 33: kubex.keystone.Mutation.mutator:type_name -> kubex.keystone.Mutator
	64,  // 34: kubex.keystone.Mutation.timestamp:type_name -> google.protobuf.Timestamp
	0,   // 35: kubex.keystone.Mutation.state:type_name -> kubex.keystone.EntityState
	17,  // 36: kubex.keystone.Mutation.properties:type_name -> kubex.keystone.EntityProperty
	17,  // 37: kubex.keystone.Mutation.dynamic_properties:type_name -> kubex.keystone.EntityProperty
	20,  // 38: kubex.keystone.Mutation.logs:type_name -> kubex.keystone.EntityLog
	21,  // 39: kubex.keystone.Mutation.events:type_name -> kubex.keystone.EntityEvent
	18,  // 40: kubex.keystone.Mutation.children:type_name -> kubex.keystone.EntityChild
	18,  // 41: kubex.keystone.Mutation.remove_children:type_name -> kubex.keystone.EntityChild
	22,  // 42: kubex.keystone.Mutation.relationships:type_name -> kubex.keystone.EntityRelationship
	22,  // 43: kubex.keystone.Mutation.remove_relationships:type_name -> kubex.keystone.EntityRelationship
	23,  // 44: kubex.keystone.Mutation.labels:type_name -> kubex.keystone.EntityLabel
	23,  // 45: kubex.keystone.Mutation.remove_labels:type_name -> kubex.keystone.EntityLabel
	24,  // 46: kubex.keystone.Mutation.measurements:type_name -> kubex.keystone.EntitySensorMeasurement
	64,  // 47: kubex.keystone.Window.since:type_name -> google.protobuf.Timestamp
	64,  // 48: kubex.keystone.Window.until:type_name -> google.protobuf.Timestamp
	2,   // 49: kubex.keystone.PropertyFilter.operator:type_name -> kubex.keystone.Operator
	15,  // 50: kubex.keystone.PropertyFilter.values:type_name -> kubex.keystone.Value
	10,  // 51: kubex.keystone.SchemaRequest.authorization:type_name -> kubex.keystone.Authorization
	12,  // 52: kubex.keystone.SchemaRequest.schema:type_name -> kubex.keystone.Schema
	47,  // 53: kubex.keystone.SchemaRequest.stored_views:type_name -> kubex.keystone.StoredView
	32,  // 54: kubex.keystone.SchemaRequest.views:type_name -> kubex.keystone.EntityView
	10,  // 55: kubex.keystone.MutateRequest.authorization:type_name -> kubex.keystone.Authorization
	14,  // 56: kubex.keystone.MutateRequest.schema:type_name -> kubex.keystone.Key
	26,  // 57: kubex.keystone.MutateRequest.mutation:type_name -> kubex.keystone.Mutation
	38,  // 58: kubex.keystone.EntityView.properties:type_name -> kubex.keystone.PropertyRequest
	39,  // 59: kubex.keystone.EntityView.children:type_name -> kubex.keystone.ChildRequest
	14,  // 60: kubex.keystone.EntityView.relationship_by_type:type_name -> kubex.keystone.Key
	14,  // 61: kubex.keystone.EntityView.descendant_count_type:type_name -> kubex.keystone.Key
	14,  // 62: kubex.keystone.EntityView.relationship_count_type:type_name -> kubex.keystone.Key
	14,  // 63: kubex.keystone.TypeCount.type:type_name -> kubex.keystone.Key
	10,  // 64: kubex.keystone.EntityRequest.authorization:type_name -> kubex.keystone.Authorization
	37,  // 65: kubex.keystone.EntityRequest.unique_id:type_name -> kubex.keystone.IDLookup
	32,  // 66: kubex.keystone.EntityRequest.view:type_name -> kubex.keystone.EntityView
	14,  // 67: kubex.keystone.EntityRequest.schema:type_name -> kubex.keystone.Key
	16,  // 68: kubex.keystone.EntityResponse.entity:type_name -> kubex.keystone.Entity
	17,  // 69: kubex.keystone.EntityResponse.properties:type_name -> kubex.keystone.EntityProperty
	18,  // 70: kubex.keystone.EntityResponse.children:type_name -> kubex.keystone.EntityChild
	19,  // 71: kubex.keystone.EntityResponse.datum:type_name -> kubex.keystone.EntityDatum
	22,  // 72: kubex.keystone.EntityResponse.relationships:type_name -> kubex.keystone.EntityRelationship
	23,  // 73: kubex.keystone.EntityResponse.labels:type_name -> kubex.keystone.EntityLabel
	33,  // 74: kubex.keystone.EntityResponse.relationship_counts:type_name -> kubex.keystone.TypeCount
	33,  // 75: kubex.keystone.EntityResponse.descendant_counts:type_name -> kubex.keystone.TypeCount
	33,  // 76: kubex.keystone.EntityResponse.child_counts:type_name -> kubex.keystone.TypeCount
	17,  // 77: kubex.keystone.EntityResponse.dynamic_properties:type_name -> kubex.keystone.EntityProperty
	9,   // 78: kubex.keystone.PropertyRequest.source:type_name -> kubex.keystone.VendorApp
	14,  // 79: kubex.keystone.ChildRequest.type:type_name -> kubex.keystone.Key
	10,  // 80: kubex.keystone.LogRequest.authorization:type_name -> kubex.keystone.Authorization
	14,  // 81: kubex.keystone.LogRequest.type:type_name -> kubex.keystone.Key
	1,   // 82: kubex.keystone.LogRequest.levels:type_name -> kubex.keystone.LogLevel
	1,   // 83: kubex.keystone.LogRequest.min_level:type_name -> kubex.keystone.LogLevel
	27,  // 84: kubex.keystone.LogRequest.window:type_name -> kubex.keystone.Window
	20,  // 85: kubex.keystone.LogsResponse.logs:type_name -> kubex.keystone.EntityLog
	10,  // 86: kubex.keystone.EventRequest.authorization:type_name -> kubex.keystone.Authorization
	14,  // 87: kubex.keystone.EventRequest.event_by_type:type_name -> kubex.keystone.Key
	27,  // 88: kubex.keystone.EventRequest.events_in_window:type_name -> kubex.keystone.Window
	21,  // 89: kubex.keystone.EventsResponse.events:type_name -> kubex.keystone.EntityEvent
	14,  // 90: kubex.keystone.RelationOf.relationship:type_name -> kubex.keystone.Key
	10,  // 91: kubex.keystone.FindRequest.authorization:type_name -> kubex.keystone.Authorization
	14,  // 92: kubex.keystone.FindRequest.schema:type_name -> kubex.keystone.Key
	32,  // 93: kubex.keystone.FindRequest.view:type_name -> kubex.keystone.EntityView
	44,  // 94: kubex.keystone.FindRequest.relation_of:type_name -> kubex.keystone.RelationOf
	28,  // 95: kubex.keystone.FindRequest.property_filters:type_name -> kubex.keystone.PropertyFilter
	23,  // 96: kubex.keystone.FindRequest.label_filters:type_name -> kubex.keystone.EntityLabel
	35,  // 97: kubex.keystone.FindResponse.entities:type_name -> kubex.keystone.EntityResponse
	10,  // 98: kubex.keystone.StoredView.authorization:type_name -> kubex.keystone.Authorization
	14,  // 99: kubex.keystone.StoredView.schema:type_name -> kubex.keystone.Key
	28,  // 100: kubex.keystone.StoredView.filters:type_name -> kubex.keystone.PropertyFilter
	8,   // 101: kubex.keystone.StoredView.type:type_name -> kubex.keystone.StoredView.Type
	10,  // 102: kubex.keystone.ListRequest.authorization:type_name -> kubex.keystone.Authorization
	14,  // 103: kubex.keystone.ListRequest.schema:type_name -> kubex.keystone.Key
	28,  // 104: kubex.keystone.ListRequest.filters:type_name -> kubex.keystone.PropertyFilter
	29,  // 105: kubex.keystone.ListRequest.sort:type_name -> kubex.keystone.PropertySort
	48,  // 106: kubex.keystone.ListRequest.page:type_name -> kubex.keystone.PageRequest
	35,  // 107: kubex.keystone.ListResponse.entities:type_name -> kubex.keystone.EntityResponse
	35,  // 108: kubex.keystone.EntitiesResponse.entities:type_name -> kubex.keystone.EntityResponse
	10,  // 109: kubex.keystone.SchemaStatisticsRequest.authorization:type_name -> kubex.keystone.Authorization
	14,  // 110: kubex.keystone.SchemaStatisticsRequest.schema:type_name -> kubex.keystone.Key
	52,  // 111: kubex.keystone.SchemaStatisticsRequest.created_from:type_name -> kubex.keystone.Date
	52,  // 112: kubex.keystone.SchemaStatisticsRequest.created_until:type_name -> kubex.keystone.Date
	62,  // 113: kubex.keystone.SchemaStatisticsResponse.daily_count:type_name -> kubex.keystone.SchemaStatisticsResponse.DailyCountEntry
	10,  // 114: kubex.keystone.DailyEntityRequest.authorization:type_name -> kubex.keystone.Authorization
	14,  // 115: kubex.keystone.DailyEntityRequest.schema:type_name -> kubex.keystone.Key
	52,  // 116: kubex.keystone.DailyEntityRequest.date:type_name -> kubex.keystone.Date
	63,  // 117: kubex.keystone.DailyEntityResponse.entities:type_name -> kubex.keystone.DailyEntityResponse.EntitiesEntry
	30,  // 118: kubex.keystone.Keystone.Define:input_type -> kubex.keystone.SchemaRequest
	31,  // 119: kubex.keystone.Keystone.Mutate:input_type -> kubex.keystone.MutateRequest
	34,  // 120: kubex.keystone.Keystone.Retrieve:input_type -> kubex.keystone.EntityRequest
	45,  // 121: kubex.keystone.Keystone.Find:input_type -> kubex.keystone.FindRequest
	49,  // 122: kubex.keystone.Keystone.List:input_type -> kubex.keystone.ListRequest
	40,  // 123: kubex.keystone.Keystone.Logs:input_type -> kubex.keystone.LogRequest
	42,  // 124: kubex.keystone.Keystone.Events:input_type -> kubex.keystone.EventRequest
	55,  // 125: kubex.keystone.Keystone.DailyEntities:input_type -> kubex.keystone.DailyEntityRequest
	53,  // 126: kubex.keystone.Keystone.SchemaStatistics:input_type -> kubex.keystone.SchemaStatisticsRequest
	12,  // 127: kubex.keystone.Keystone.Define:output_type -> kubex.keystone.Schema
	36,  // 128: kubex.keystone.Keystone.Mutate:output_type -> kubex.keystone.MutateResponse
	35,  // 129: kubex.keystone.Keystone.Retrieve:output_type -> kubex.keystone.EntityResponse
	46,  // 130: kubex.keystone.Keystone.Find:output_type -> kubex.keystone.FindResponse
	50,  // 131: kubex.keystone.Keystone.List:output_type -> kubex.keystone.ListResponse
	41,  // 132: kubex.keystone.Keystone.Logs:output_type -> kubex.keystone.LogsResponse
	43,  // 133: kubex.keystone.Keystone.Events:output_type -> kubex.keystone.EventsResponse
	56,  // 134: kubex.keystone.Keystone.DailyEntities:output_type -> kubex.keystone.DailyEntityResponse
	54,  // 135: kubex.keystone.Keystone.SchemaStatistics:output_type -> kubex.keystone.SchemaStatisticsResponse
	127, // [127:136] is the sub-list for method output_type
	118, // [118:127] is the sub-list for method input_type
	118, // [118:118] is the sub-list for extension type_name
	118, // [118:118] is the sub-list for extension extendee
	0,   // [0:118] is the sub-list for field type_name
}

func init() { file_keystone_proto_init() }
func file_keystone_proto_init() {
	if File_keystone_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_keystone_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityChild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityDatum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitySensorMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mutator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertySort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keystone_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keystone_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_keystone_proto_goTypes,
		DependencyIndexes: file_keystone_proto_depIdxs,
		EnumInfos:         file_keystone_proto_enumTypes,
		MessageInfos:      file_keystone_proto_msgTypes,
	}.Build()
	File_keystone_proto = out.File
	file_keystone_proto_rawDesc = nil
	file_keystone_proto_goTypes = nil
	file_keystone_proto_depIdxs = nil
}
