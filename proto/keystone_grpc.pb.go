// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: keystone.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeystoneClient is the client API for Keystone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeystoneClient interface {
	Define(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*Schema, error)
	Mutate(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*Entity, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*FindResponse, error)
}

type keystoneClient struct {
	cc grpc.ClientConnInterface
}

func NewKeystoneClient(cc grpc.ClientConnInterface) KeystoneClient {
	return &keystoneClient{cc}
}

func (c *keystoneClient) Define(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, "/kubex.keystone.Keystone/Define", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Mutate(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error) {
	out := new(MutateResponse)
	err := c.cc.Invoke(ctx, "/kubex.keystone.Keystone/Mutate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/kubex.keystone.Keystone/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/kubex.keystone.Keystone/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keystoneClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/kubex.keystone.Keystone/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeystoneServer is the server API for Keystone service.
// All implementations must embed UnimplementedKeystoneServer
// for forward compatibility
type KeystoneServer interface {
	Define(context.Context, *Schema) (*Schema, error)
	Mutate(context.Context, *MutateRequest) (*MutateResponse, error)
	Retrieve(context.Context, *RetrieveRequest) (*Entity, error)
	Find(context.Context, *FindRequest) (*FindResponse, error)
	Lookup(context.Context, *LookupRequest) (*FindResponse, error)
	mustEmbedUnimplementedKeystoneServer()
}

// UnimplementedKeystoneServer must be embedded to have forward compatible implementations.
type UnimplementedKeystoneServer struct {
}

func (UnimplementedKeystoneServer) Define(context.Context, *Schema) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Define not implemented")
}
func (UnimplementedKeystoneServer) Mutate(context.Context, *MutateRequest) (*MutateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mutate not implemented")
}
func (UnimplementedKeystoneServer) Retrieve(context.Context, *RetrieveRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedKeystoneServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedKeystoneServer) Lookup(context.Context, *LookupRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedKeystoneServer) mustEmbedUnimplementedKeystoneServer() {}

// UnsafeKeystoneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeystoneServer will
// result in compilation errors.
type UnsafeKeystoneServer interface {
	mustEmbedUnimplementedKeystoneServer()
}

func RegisterKeystoneServer(s grpc.ServiceRegistrar, srv KeystoneServer) {
	s.RegisterService(&Keystone_ServiceDesc, srv)
}

func _Keystone_Define_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Define(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubex.keystone.Keystone/Define",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Define(ctx, req.(*Schema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Mutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Mutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubex.keystone.Keystone/Mutate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Mutate(ctx, req.(*MutateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubex.keystone.Keystone/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubex.keystone.Keystone/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keystone_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeystoneServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubex.keystone.Keystone/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeystoneServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Keystone_ServiceDesc is the grpc.ServiceDesc for Keystone service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keystone_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubex.keystone.Keystone",
	HandlerType: (*KeystoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Define",
			Handler:    _Keystone_Define_Handler,
		},
		{
			MethodName: "Mutate",
			Handler:    _Keystone_Mutate_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Keystone_Retrieve_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Keystone_Find_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _Keystone_Lookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keystone.proto",
}
